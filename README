Simulation Poetry Generation (SPG)

This program is very easy to set up simply run poet.py and it should start making poetry. If you want to generate specific types of poems change the value in write_structure() in poem_maker.py.


This was the longest, most tedious, and frustrating projects of my Bowdoin CS. I don’t think it is a bad assignment, but I probably just put work into the wrong areas. To start it was so challenging to think about how poets would interact with the environment and each other in a way that would be transferable into poetry. Not only is building an environment, filling it, and having poets move through it tough, but figuring out what they saved from these interactions and how these interactions changed them was extremely difficult. For a day or two I was just lost thinking about how poets could come out of the simulation with content to write poems. Eventually I just ended up with a bunch of lists that explained what they had seen and what had happened to them. This was still abstract, not super applicable, and I had not even started word processing. This leads to the weakest part of my program: the word processing. It’s not all that dynamic or variable and it follows a pretty strict structure that I hard codded. I couldn’t really think of a way of using this meta data collected and created during the simulation in a way that didn’t require structured outlines for poems. I also had spent a lot of time on creating unique timelines for these poets that I didn’t have a lot of time to invest in word manipulation. Furthermore, this is the largest program I have ever written and although not that big it felt like there, we’re a lot of moving parts and many different types of coding. At some points it felt very MDP or Monte Carlo Simulation esk, and other times I was building structures to represent a poem. This also added to its difficulty and time requirement. It’s not amazing and the poems aren’t really pomes more just reflections on these poets’ lives. 

I looked at the following papers: Full-FACE Poetry Generation by Simon Colton by Jacob Goodwin and Tony Veale, Corpus-Based Generation of Content and Form in Poetry by Jukka M. Toivanen, Hannu Toivonen, Alessandro Valitutti and Oskar Gross, and Poetic Machine: Computational Creativity for Automatic Poetry Generation in Bengali by Amitava Das and Björn Gambäck. Unfortunately, none of the papers inspired me and in fact they usually decreased my confidence in what I was doing. The common theme among them was to focus on the structure of language and from there produce a poem that would be good my metrics of the language. In Corpus-Based Generation of Content and Form in Poem the computer didn’t even create a topic rather the user entered a topic and the program would find a poem that had been written, change it a bit to fit the input topic, and then spit out the new poem. This isn’t creative. Its too product focused to be creative. The confines of the valuation inherently limited what the poem could be. Now I’m not saying my poetry maker is making anything nearly as pretty or as creative, but in this and the others there wasn’t a lot of focus on process. Creativity is significantly a product of the process of being creative and if researchers don’t focus on a unique process then the results will always have hits of hegemony. 
I started working on this project before reading the three papers above, but when it was assigned, I knew I was going to focus on the development of a topic for the poem. This is my program; I hope you like it. 



